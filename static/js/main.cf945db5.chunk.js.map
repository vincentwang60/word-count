{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","file","setFile","output","setOutput","done","setDone","left","setLeft","right","setRight","connect_chars","useEffect","console","log","parseFile","fileOutput","current","i","length","includes","toLowerCase","concat","onFileChange","e","a","preventDefault","reader","FileReader","onload","text","target","result","readAsText","files","onTextChange","value","sortFunctionFirst","b","sortable","key","hasOwnProperty","push","sort","array","display","component","map","index","Fragment","defaultValue","size","type","onChange","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cf945db5.chunk.js","sourcesContent":["import axios from 'axios';\r\nimport React, {useState, useEffect} from 'react';\r\n\r\nexport default function App(){\r\n  const [file, setFile] = useState()\r\n  const [output, setOutput] = useState({})\r\n  const [done, setDone] = useState(false)\r\n  const [left, setLeft] = useState(0)\r\n  const [right, setRight] = useState(9999)\r\n  const word_chars = \"0123456789abcdefghijklmnopqrstuvwxyz-'’\"\r\n  const connect_chars = ' —.,():;?!\"'\r\n\r\n  useEffect(()=>{\r\n    if(file != null){\r\n      console.log('file changed')\r\n      parseFile()\r\n    }\r\n  },[file])\r\n\r\n  const parseFile = () => {\r\n    console.log('parsing')\r\n    let current = '';\r\n    for (let i = 0; i < file.length; i++){\r\n      if(word_chars.includes(file[i].toLowerCase())){\r\n        current = current.concat(file[i].toLowerCase())\r\n      }\r\n      else if(connect_chars.includes(file[i])){\r\n        if(!connect_chars.includes(current)){\r\n          if(output[current] == null){\r\n            output[current] = 1\r\n          }\r\n          else{\r\n            output[current]++\r\n          }\r\n          setOutput(output)\r\n          current = ''\r\n        }\r\n      }\r\n      else{\r\n      }\r\n    }\r\n    if(!connect_chars.includes(current)){\r\n      if(output[current] == null){\r\n        output[current] = 1\r\n      }\r\n      else{\r\n        output[current]++\r\n      }\r\n      setOutput(output)\r\n      current = ''\r\n    }\r\n    setOutput(output)\r\n    current = ''\r\n    setDone(true)\r\n  }\r\n  const onFileChange = async (e) => {\r\n    e.preventDefault()\r\n    const reader = new FileReader()\r\n    reader.onload = async (e) => {\r\n      const text = (e.target.result)\r\n      setFile(text)\r\n    };\r\n    reader.readAsText(e.target.files[0])\r\n  }\r\n  const onTextChange = async (e) => {\r\n    setFile(e.target.value)\r\n  }\r\n  const sortFunction = (a,b) => {\r\n    if (a[1] === b[1]) {\r\n        return 0;\r\n    }\r\n    else {\r\n        return (a[1] < b[1]) ? -1 : 1;\r\n    }\r\n  }\r\n  const sortFunctionFirst = (a,b) => {\r\n    if (a[0] === b[0]) {\r\n        return 0;\r\n    }\r\n    else {\r\n        return (a[0] < b[0]) ? -1 : 1;\r\n    }\r\n  }\r\n  let fileOutput\r\n  if (done){\r\n    var sortable=[];\r\n  \tfor(var key in output)\r\n  \t\tif(output.hasOwnProperty(key))\r\n  \t\t\tsortable.push([key, output[key]])\r\n    sortable.sort(sortFunction)\r\n    let current = sortable[0][1]\r\n    let array = []\r\n    let newSortable = []\r\n    let display = []\r\n    console.log('sortable:',sortable)\r\n    for(let i = 0; i < sortable.length; i++){\r\n      if(sortable[i][1] == current){\r\n        console.log('!!!',current,':',array)\r\n        array.push(sortable[i][0]+' ')\r\n      }\r\n      else{\r\n        console.log(current,'||', array)\r\n        array.sort(sortFunctionFirst)\r\n        let component = <div>{current}:{array}</div>\r\n        display.push(component)\r\n        if(i < sortable.length){\r\n          current = sortable[i][1]\r\n          console.log('new current:', sortable[i][1])\r\n        }\r\n        array = [sortable[i][0]+' ']\r\n      }\r\n    }\r\n    array.sort(sortFunctionFirst)\r\n    console.log(current,'||',array)\r\n    let component = <div>{current}:{array}</div>\r\n    display.push(component)\r\n\r\n    fileOutput=\r\n      display.map((component, index) => (\r\n        <React.Fragment key={index}>\r\n            { component }\r\n        </React.Fragment>\r\n      ));\r\n  }\r\n  else{\r\n    fileOutput=\r\n      <div>\r\n        <h1>idk</h1>\r\n      </div>\r\n  }\r\n  return(\r\n    <div>\r\n      <h1>Upload a text file or copy paste</h1>\r\n      <p>\r\n      show words with frequencies from:\r\n         <input defaultValue={left} size={1} type=\"text\" onChange={(e)=>{setLeft(e.target.value)}}/>\r\n      to:\r\n      <input defaultValue={right} size={1} type=\"text\" onChange={(e)=>{setRight(e.target.value)}}/>\r\n      </p>\r\n      <p>\r\n      <input type=\"file\" onChange={(e) => onFileChange(e)}/>\r\n      </p>\r\n      <input type=\"textarea\" onChange={(e)=> onTextChange(e)}/>\r\n      {fileOutput}\r\n    </div>\r\n  )\r\n}\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}